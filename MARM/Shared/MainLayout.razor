@using ElectronNET.API
@using MARM.Services
@using MARM.Enums
@using MARM.Data
@inherits LayoutComponentBase

@inject NavigationManager  naviManger
@inject IPageNavigationService pageNavi
@inject IComDataService comService
@inject IDataSendService dataSender
@inject IDataSettingService dataSetting
@inject ApplicationDbContext dbContext
@inject ISnackbar Snackbar

<PageTitle>MARM</PageTitle>

<div class="w-100 h-100 d-flex flex-column">
    <header class="d-flex flex-column align-items-center ">
        <img class="w-100 h-100" src="images/Picture1.png" />
        <MudGrid>
            <MudItem Class="d-flex justify-center flex-grow-1">
                <h2 class="my-1 w-auto fw-bold text-center">MÁY TÍNH TRUNG TÂM GIÁM SÁT KẾT QUẢ BẮN PHÁO TRÊN BIỂN</h2>
            </MudItem>
            <MudItem Class="my-auto">
                <MudIconButton @onclick="MinimizeApp" Icon="@Icons.Material.Filled.Minimize" Color="Color.Primary" />
                <MudIconButton @onclick="CloseApp" Icon="@Icons.Material.Filled.Close" Color="Color.Error" />
            </MudItem>
        </MudGrid>
    </header>
    <main>
        <div class="w-100">
            @Body
        </div>
    </main>
    <footer class="w-100 d-flex justify-content-between align-items-center" style="background-color: #FFD966;">
        <div>
            <MudIconButton @onclick="NavigateBack" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" />
        </div>
        <div class="d-flex flex-row align-items-center">

            <div class="nav-item">
                <NavLink @onclick="DashboardClick" class="nav-link" href="/ak/dashboard">
                    <span class="mdi mdi-view-dashboard mdi-24px" aria-hidden="true"></span> Dashboard
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink @onclick="SettingClick" class="nav-link" href="/setting">
                    <span class="mdi mdi-cog mdi-24px" aria-hidden="true"></span> Setting
                </NavLink>
            </div>
            <div class="nav-item" >
                <NavLink @onclick="CheckClick" class="nav-link" href="/checklist" style="@($"color: {colorButton}; background:{backgroundButton};")">
                    <span class="mdi mdi-playlist-check mdi-24px" aria-hidden="true"></span> Kiểm tra hệ thống
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink @onclick="DataClick" class="nav-link" href="/navalunits">
                    <span class="mdi mdi-ship-wheel mdi-24px" aria-hidden="true"></span> Quản lý đơn vị
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink @onclick="DataExportClick" class="nav-link" href="/data">
                    <span class="mdi mdi-database mdi-24px" aria-hidden="true"></span> Quản lý kết quả
                </NavLink>
            </div>
        </div>

        <div>
            <MudIconButton @onclick="NavigateForward" Icon="@Icons.Material.Filled.ArrowForward" Color="Color.Primary" />
        </div>
    </footer>
</div>

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    private string colorButton { get; set; } = "";
    private string backgroundButton { get; set; } = "";
    private bool errorStatus { get; set; } = false;
    private string currentPageName { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        pageNavi.PageNameChanged += HandlePageNameChanged;

        dataSender.LeakStateReceived += HandleLeakStateReceived;

        if (comService.IsConnected())
        {
            pageNavi.NavigateTo("dashboard");
            
            Snackbar.Add("Kết nối thành công!", Severity.Success);
        }
        else
        {
            pageNavi.NavigateTo("setting");
            Snackbar.Add("Không thể kết nối đến cổng COM!", Severity.Error);
        }

    }

    private async void HandleLeakStateReceived(byte[] data)
    {
        for (int i = 0; i < 5; i++)
        {
            _ = InvokeAsync(() =>
             {
                 colorButton = "#FFFFFF";
                 backgroundButton = Colors.DeepOrange.Lighten1;
                 StateHasChanged();
             });

            await Task.Delay(500);
            _ = InvokeAsync(() =>
            {
                colorButton = "";
                backgroundButton = "";
                StateHasChanged();
            });
            await Task.Delay(500);
        }


    }

    private void HandlePageNameChanged(string pageName)
    {
        _ = InvokeAsync(() =>
        {
            currentPageName = pageName;
            naviManger.NavigateTo(pageName.Trim());
            StateHasChanged();
        });
    }

    private void NavigateBack()
    {
        pageNavi.NavigateBack();
    }

    private void NavigateForward()
    {
        pageNavi.NavigateForward();
    }

    // Phương thức đóng ứng dụng
    private void CloseApp()
    {
        Electron.WindowManager.BrowserWindows.First().Close();
    }

    private void MinimizeApp()
    {
        Electron.WindowManager.BrowserWindows.First().Minimize();
    }

    public void Dispose()
    {
        pageNavi.PageNameChanged -= HandlePageNameChanged;
    }
    private  void DataClick()
    {
        pageNavi.NavigateTo("navalunits");
    }
    private  void DashboardClick()
    {
        pageNavi.NavigateTo("dashboard");
    }
    private  void SettingClick()
    {
        pageNavi.NavigateTo("setting");
    }
    private void DataExportClick()
    {
        pageNavi.NavigateTo("data");
    }
    private void CheckClick()
    {
        pageNavi.NavigateTo("");
    }
}

