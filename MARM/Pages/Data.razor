@page "/data"
@using MARM.Data
@using Newtonsoft.Json

@inject ApplicationDbContext ApplicationDb
@inject ISnackbar Snackbar

<div class="d-flex flex-grow-1 gap-2">
    <div>
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h4">Kết quả bắn</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudDatePicker Label="Basic example" @bind-Date="ShotTimeSearch" />
            </MudCardContent>
            <MudCardActions>
                <MudSpacer/>
                <MudButton OnClick="SearchClick">Kiểm tra</MudButton>
            </MudCardActions>
        </MudCard>
    </div>
    <div>
        <MudDataGrid T="BoatUnitMissionExportResult" MultiSelection="true" Items="@BoatUnitMissionExportResults" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                     Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Kết quả trong ngày</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="BoatUnitMissionExportResult" />
                <PropertyColumn Property="x => x.Index" Title="TT" />
                <PropertyColumn Property="x => x.BoatName" Title="Đơn vị" />
                <PropertyColumn Property="x => x.ShotTime" Title="Thời gian" />
                <PropertyColumn Property="x => x.ShotTotal" Title="Số vết đạn trúng bia"/>
                <PropertyColumn Property="x => x.ShotPosition" Title="Vùng trúng" />
                <PropertyColumn Property="x => x.Note" Title="Ghi chú" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="BoatUnitMissionExportResult" />
            </PagerContent>
        </MudDataGrid>
    </div>

</div>

@code {
    private List<BoatUnitMissionExportResult> BoatUnitMissionExportResults = new List<BoatUnitMissionExportResult>();
    private DateTime? ShotTimeSearch = DateTime.Now;
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    // custom sort by name length
    private Func<BoatUnitMissionResult, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<BoatUnitMissionExportResult, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.BoatName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.ShotPosition.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.ShotTotal}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {

    }

    private void SearchClick()
    {
        _ = InvokeAsync(async () =>
        {
            BoatUnitMissionExportResults = await ApplicationDb.GetAllBoatUnitMissions(ShotTimeSearch);
            Console.WriteLine(JsonConvert.SerializeObject(BoatUnitMissionExportResults));
            StateHasChanged();
        });

    }

    // events
    void RowClicked(DataGridRowClickEventArgs<BoatUnitMissionExportResult> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<BoatUnitMissionExportResult> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<BoatUnitMissionExportResult> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}
