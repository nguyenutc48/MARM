@using MARM.Services
@using MARM.Enums
@page "/checklist"

<PageTitle>Check list</PageTitle>
@inject IDataSendService dataSender

<div class="w-100 h-100 d-flex flex-column">
    <div class="d-flex flex-row justify-content-between align-items-center">
        <MudText Typo="Typo.h4">
            Kiểm tra, thông báo tình trạng các ô của mặt chắn đạn
        </MudText>
        <MudButton @onclick="CheckClick" Variant="Variant.Filled" Color="Color.Primary">Kiểm tra</MudButton>
        <img src="images/Picture2.png" class="me-10" height="100" alt="device" />
    </div>
    <div class="flex-grow-1 w-100 position-relative overflow-hidden">
        <div class="w-100 h-100 px-2 position-absolute top-0 start-0 overflow-hidden d-flex flex-row">
            <div class="col-6 p-2">
                <MudCard Elevation="6">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">
                                Tình trạng của các ô mặt chắn đạn
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="d-flex flex-row">
                        <MudTable T="ChecklistDataModel" Items="@MatChanDanChinh" Class="col mx-2" Hover="true" LoadingProgressColor="Color.Info" Bordered>
                            <HeaderContent>
                                <MudTh>Ô mặt chắn đạn</MudTh>
                                <MudTh>Tình trạng</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Id</MudTd>
                                <MudTd>@context.State</MudTd>
                            </RowTemplate>
                        </MudTable>
                        <MudTable T="ChecklistDataModel" Items="@MatChanDanPhu" Class="col mx-2" Hover="true" LoadingProgressColor="Color.Info" Bordered>
                            <HeaderContent>
                                <MudTh>Ô mặt chắn đạn</MudTh>
                                <MudTh>Tình trạng</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Id</MudTd>
                                <MudTd>@context.State</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
            </div>
            <div class="col-3 p-2">
                <MudCard Elevation="6">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">
                                Mặt hứng đạn chính
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTable T="ChecklistDataModel" Items="@MatHungDanChinh" Hover="true" LoadingProgressColor="Color.Info" Bordered>
                            <HeaderContent>
                                <MudTh>Tín hiệu</MudTh>
                                <MudTh>Hoạt động</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Id</MudTd>
                                <MudTd>@context.State</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
            </div>
            <div class="col-3 p-2">
                <MudCard Elevation="6">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h4">
                                Mặt hứng đạn phụ
                            </MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTable T="ChecklistDataModel" Items="@MatHungDanPhu" Hover="true" LoadingProgressColor="Color.Info" Bordered>
                            <HeaderContent>
                                <MudTh>Tín hiệu</MudTh>
                                <MudTh>Hoạt động</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Id</MudTd>
                                <MudTd>@context.State</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
            </div>
        </div>
    </div>
</div>

    @code {
    public class ChecklistDataModel
    {
        public int Id { get; set; }
        public string State { get; set; } = "";
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataSender.RemoteStateReceived += HandleStateReceived;
        dataSender.LeakStateReceived += HandleLeakStateReceived;
    }

    private void HandleStateReceived(byte[] data)
    {
        _ = InvokeAsync(() =>
        {
            var remoteAddress = data[0];
            switch (remoteAddress)
            {
                case (byte)RemoteAddress.Main:
                    {
                        for (int i = 0; i < 8; i++)
                        {
                            // Tạo mask với bit 1 tại vị trí i
                            var matChanChinh = MatHungDanChinh.FirstOrDefault(c => c.Id == (i + 1));
                            if (matChanChinh != null)
                            {
                                byte mask = (byte)(1 << i);
                                if ((data[2] & mask) == 0) // Kiểm tra bit tại vị trí i có phải là 0 không
                                {
                                    matChanChinh.State = "Bị chập";
                                }
                                else
                                {
                                    matChanChinh.State = "Tốt";
                                }
                            }

                        }
                    }
                    break;
                case (byte)RemoteAddress.Sub:
                    {
                        for (int i = 0; i < 8; i++)
                        {
                            byte mask = (byte)(1 << i); // Tạo mask với bit 1 tại vị trí i
                            var matChanPhu = MatHungDanPhu.FirstOrDefault(c => c.Id == (i + 9));
                            if (matChanPhu != null)
                            {
                                if ((data[2] & mask) == 0) // Kiểm tra bit tại vị trí i có phải là 0 không
                                {
                                    matChanPhu.State = "Bị chập";
                                }
                                else
                                {
                                    matChanPhu.State = "Tốt";
                                }

                            }
                        }
                    }
                    break;
                default:
                    break;

            }
            StateHasChanged();
        });
    }

    private void HandleLeakStateReceived(byte[] data)
    {
        _ = InvokeAsync(() =>
        {
            var remoteAddress = data[0];
            switch(remoteAddress)
            {
                case (byte)RemoteAddress.Main:
                    {
                        for (int i = 0; i < 8; i++)
                        {
                            // Tạo mask với bit 1 tại vị trí i
                            var matChanChinh = MatChanDanChinh.FirstOrDefault(c => c.Id == (i+1));
                            if(matChanChinh != null)
                            {
                                byte mask = (byte)(1 << i);
                                if ((data[1] & mask) == 0) // Kiểm tra bit tại vị trí i có phải là 0 không
                                {
                                    matChanChinh.State = "Bị chập";
                                }
                                else
                                {
                                    matChanChinh.State = "Bình thường";
                                }

                            }
                        
                        }
                    }
                    break;
                case (byte)RemoteAddress.Sub:
                    {
                        for (int i = 0; i < 8; i++)
                        {
                            byte mask = (byte)(1 << i); // Tạo mask với bit 1 tại vị trí i
                            var matChanPhu = MatChanDanPhu.FirstOrDefault(c => c.Id == (i + 9));
                            if (matChanPhu != null)
                            {
                                if ((data[1] & mask) == 0) // Kiểm tra bit tại vị trí i có phải là 0 không
                                {
                                    matChanPhu.State = "Bị chập";
                                }
                                else
                                {
                                    matChanPhu.State = "Bình thường";
                                }

                            }
                        }
                    }
                    break;
                default:
                    break;
             
            }
            StateHasChanged();
        });
    }


    private List<ChecklistDataModel> MatHungDanChinh = new()
    {
        new ChecklistDataModel{ Id = 1, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 2, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 3, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 4, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 5, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 6, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 7, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 8, State = "Không hoạt động"},
    };

    private List<ChecklistDataModel> MatHungDanPhu = new()
    {
        new ChecklistDataModel{ Id = 9, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 10, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 11, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 12, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 13, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 14, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 15, State = "Không hoạt động"},
        new ChecklistDataModel{ Id = 16, State = "Không hoạt động"},
    };

    private List<ChecklistDataModel> MatChanDanChinh = new()
    {
        new ChecklistDataModel{ Id = 1, State = "Bình thường"},
        new ChecklistDataModel{ Id = 2, State = "Bình thường"},
        new ChecklistDataModel{ Id = 3, State = "Bình thường"},
        new ChecklistDataModel{ Id = 4, State = "Bình thường"},
        new ChecklistDataModel{ Id = 5, State = "Bình thường"},
        new ChecklistDataModel{ Id = 6, State = "Bình thường"},
        new ChecklistDataModel{ Id = 7, State = "Bình thường"},
        new ChecklistDataModel{ Id = 8, State = "Bình thường"},
    };

    private List<ChecklistDataModel> MatChanDanPhu = new()
    {
        new ChecklistDataModel{ Id = 9, State = "Bình thường"},
        new ChecklistDataModel{ Id = 10, State = "Bình thường"},
        new ChecklistDataModel{ Id = 11, State = "Bình thường"},
        new ChecklistDataModel{ Id = 12, State = "Bình thường"},
        new ChecklistDataModel{ Id = 13, State = "Bình thường"},
        new ChecklistDataModel{ Id = 14, State = "Bình thường"},
        new ChecklistDataModel{ Id = 15, State = "Bình thường"},
        new ChecklistDataModel{ Id = 16, State = "Bình thường"},
    };

    private void CheckClick()
    {
        dataSender.RemoteUpdateStatus();
    }
}
